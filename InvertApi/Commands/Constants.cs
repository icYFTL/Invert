using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Invert.Commands;
public static class Constants
{
    public static List<string> DeprecatedArgs = new()
    {
        "cl_righthand",
        "+forward;+jump;-attack;-attack2", // +Jumpthrow with step
        "-jump;-forward", // -Jumpthrow with step
        "+jump;-attack;-attack2;-jump", // Classic jumpthrow
        "+jump;-attack;-jump" // Classic jumpthrow v2
    };

    public static List<string> DeprecatedCommands = new()
    {
        "cfgver",
        "unbindall", // Cause unbindall breaks the mouse movement
        "cl_allowdownload",
        "cl_allowupload",
        "cl_autowepswitch",
        "cl_cmdrate",
        "cl_debugrumble",
        "cl_detail_avoid_force",
        "cl_detail_avoid_radius",
        "cl_detail_avoid_recover_speed",
        "cl_detail_max_sway",
        "cl_downloadfilter",
        "cl_freezecampanel_position_dynamic",
        "cl_grass_mip_bias",
        "cl_hud_background_alpha",
        "cl_hud_bomb_under_radar",
        "cl_hud_healthammo_style",
        "cl_hud_playercount_pos",
        "cl_hud_playercount_showcount",
        "cl_idealpitchscale",
        "cl_minimal_rtt_shadows",
        "cl_observercrosshair",
        "cl_rumblescale",
        "cl_showpluginmessages2",
        "cl_spec_follow_grenade_key",
        "cl_spec_mode",
        "cl_viewmodel_shift_left_amt",
        "cl_viewmodel_shift_right_amt",
        "closeonbuy",
        "commentary_firstrun",
        "con_allownotify",
        "demo_index_max_other",
        "force_audio_english",
        "g15_update_msec",
        "hud_takesshots",
        "lookspring",
        "lookstrafe",
        "m_customaccel",
        "m_customaccel_exponent",
        "m_customaccel_max",
        "m_customaccel_scale",
        "m_forward",
        "m_mouseaccel1",
        "m_mouseaccel2",
        "m_mousespeed",
        "m_rawinput",
        "m_side",
        "mat_enable_uber_shaders",
        "mat_monitorgamma",
        "mat_monitorgamma_tv_enabled",
        "mat_powersavingsmode",
        "mat_queue_report",
        "mat_spewalloc",
        "mat_texture_list_content_path",
        "muzzleflash_light",
        "net_scale",
        "net_steamcnx_allowrelay",
        "snd_ducking_off",
        "snd_dzmusic_volume",
        "snd_hrtf_distance_behind",
        "snd_hrtf_voice_delay",
        "snd_hwcompat",
        "snd_mix_async",
        "snd_mix_async_onetime_reset",
        "snd_music_volume_onetime_reset_2",
        "snd_musicvolume_multiplier_inoverlay",
        "snd_pitchquality",
        "snd_surround_speakers",
        "ss_splitmode",
        "store_version",
        "suitvolume",
        "triple_monitor_mode",
        "trusted_launch_once",
        "viewmodel_recoil",
        "voice_caster_enable",
        "voice_caster_scale",
        "voice_enable",
        "voice_forcemicrecord",
        "voice_mixer_boost",
        "voice_mixer_mute",
        "voice_mixer_volume",
        "voice_positional",
        "voice_system_enable",
        "zoom_sensitivity_ratio_mouse",
        "r_dynamic",
        "r_eyegloss",
        "r_eyemove",
        "cl_disablefreezecam",
        "cl_disablehtmlmotd",
        "cl_freezecameffects_showholiday",
        "cl_showhelp",
        "cl_clearhinthistory",
        "dsp_enhance_stereo",
        "mat_queue_mode",
        "@panorama_debug_overlay_opacity",
        "ai_report_task_timings_on_limit",
        "ai_think_limit_label",
        "aim_flickstick_circular_deadzone_max",
        "aim_flickstick_circular_deadzone_min",
        "aim_flickstick_crank_sensitivity",
        "aim_flickstick_crank_tightness",
        "aim_flickstick_enabled",
        "aim_flickstick_flick_snap_mode",
        "aim_flickstick_flick_tightness",
        "aim_flickstick_forward_deadzone",
        "aim_flickstick_release_dampen_speed",
        "aim_gyro_acceleration",
        "aim_gyro_base_sensitivity",
        "aim_gyro_circular_deadzone",
        "aim_gyro_conversion_mode",
        "aim_gyro_enable_mode",
        "aim_gyro_high_sense_multiplier",
        "aim_gyro_high_sense_speed",
        "aim_gyro_invert_pitch",
        "aim_gyro_invert_yaw",
        "aim_gyro_low_sense_speed",
        "aim_gyro_pitchyaw_ratio",
        "aim_gyro_precision_speed",
        "aim_gyro_raw",
        "aim_gyro_ray_angle",
        "aim_gyro_siapi_convert_pixels_to_angles",
        "aim_gyro_siapi_sensitivity_setting",
        "aim_gyro_siapi_vertical_scale_setting",
        "aim_gyro_square_deadzone_pitch",
        "aim_gyro_square_deadzone_yaw",
        "aim_gyro_zoom_dampening_level1",
        "aim_gyro_zoom_dampening_level2",
        "aim_stick_circular_deadzone_max",
        "aim_stick_circular_deadzone_min",
        "aim_stick_extra_turning_delay",
        "aim_stick_extra_turning_ramp_up_time",
        "aim_stick_extra_yaw",
        "aim_stick_invert_pitch",
        "aim_stick_invert_yaw",
        "aim_stick_rate_pitch",
        "aim_stick_rate_yaw",
        "aim_stick_response_curve",
        "aim_stick_square_deadzone_pitch",
        "aim_stick_square_deadzone_yaw",
        "aim_stick_zoom_dampening_level1",
        "aim_stick_zoom_dampening_level2",
        "aim_touchpad_circular_deadzone_min",
        "aim_touchpad_invert_pitch",
        "aim_touchpad_invert_yaw",
        "aim_touchpad_sensitivity_pitch",
        "aim_touchpad_sensitivity_yaw",
        "aim_touchpad_square_deadzone_pitch",
        "aim_touchpad_square_deadzone_yaw",
        "aim_touchpad_zoom_dampening_level1",
        "aim_touchpad_zoom_dampening_level2",
        "budget_averages_window",
        "budget_background_alpha",
        "budget_bargraph_background_alpha",
        "budget_bargraph_range_ms",
        "budget_history_numsamplesvisible",
        "budget_history_range_ms",
        "budget_panel_bottom_of_history_fraction",
        "budget_panel_height",
        "budget_panel_width",
        "budget_panel_x",
        "budget_panel_y",
        "budget_peaks_window",
        "budget_show_averages",
        "budget_show_history",
        "budget_show_peaks",
        "bugreporter_uploadasync",
        "bugreporter_username",
        "cam_idealdistright",
        "cam_idealdistup",
        "cc_predisplay_time",
        "chet_debug_idle",
        "cl_bob_lower_amt",
        "cl_bobamt_lat",
        "cl_bobamt_vert",
        "cl_bobcycle",
        "cl_buywheel_nomousecentering",
        "cl_chatfilter_version",
        "cl_righthand",
        "cl_thirdperson",
        "demo_index",
        "joy_accelmax",
        "joy_accelscale",
        "joy_accelscalepoly",
        "joy_autoaimdampen",
        "joy_autoaimdampenmethod",
        "joy_autoaimdampenrange",
        "joy_cfg_preset",
        "joy_circle_correct",
        "joy_curvepoint_1",
        "joy_curvepoint_2",
        "joy_curvepoint_3",
        "joy_curvepoint_4",
        "joy_curvepoint_end",
        "joy_diagonalpov",
        "joy_forwardsensitivity",
        "joy_forwardthreshold",
        "joy_gamma",
        "joy_inverty",
        "joy_lowend",
        "joy_lowend_linear",
        "joy_lowmap",
        "joy_no_accel_jump",
        "joy_pitchthreshold",
        "joy_response_look_pitch",
        "joy_sensitive_step0",
        "joy_sensitive_step1",
        "joy_sensitive_step2",
        "joy_sidethreshold",
        "joy_yawthreshold",
        "joystick_force_disabled",
        "joystick_force_disabled_set_from_options",
        "mc_accel_band_size",
        "mc_dead_zone_radius",
        "mc_max_pitchrate",
        "mc_max_yawrate",
        "move_stick_aggression_strength",
        "move_stick_aggressive",
        "move_stick_circular_deadzone_max",
        "move_stick_circular_deadzone_min",
        "move_stick_response_curve",
        "move_stick_square_deadzone_forward",
        "move_stick_square_deadzone_strafe",
        "move_stick_walk_zone",
        "move_touchpad_circular_deadzone_min",
        "move_touchpad_sensitivity_forward",
        "move_touchpad_sensitivity_strafe",
        "move_touchpad_square_deadzone_forward",
        "move_touchpad_square_deadzone_strafe",
        "npc_height_adjust",
        "play_distance",
        "player_competitive_maplist_2v2_10_0_e8c782ec",
        "player_competitive_maplist_8_10_0_c9c8d674",
        "player_wargames_list2_10_0_e04",
        "r_drawmodelstatsoverlaymax",
        "r_drawmodelstatsoverlaymin",
        "r_eyeshift_x",
        "r_eyeshift_y",
        "r_eyeshift_z",
        "r_eyesize",
        "scene_showfaceto",
        "scene_showlook",
        "scene_showmoveto",
        "scene_showunlock",
        "steaminput_firsttimepopup",
        "steaminput_glyph_display_mode",
        "steaminput_glyph_neutral",
        "steaminput_glyph_solid",
        "steaminput_glyph_style",
        "sv_forcepreload",
        "sv_pvsskipanimation",
        "test_convar",
        "texture_budget_background_alpha",
        "texture_budget_panel_bottom_of_history_fraction",
        "texture_budget_panel_height",
        "texture_budget_panel_width",
        "texture_budget_panel_x",
        "texture_budget_panel_y",
        "tr_best_course_time",
        "tr_completed_training",
        "ui_mainmenu_bkgnd_movie_cc4ecb9",
        "vgui_message_dialog_modal",
        "vprof_graphheight",
        "vprof_graphwidth",
        "vprof_unaccounted_limit",
        "vprof_verbose",
        "vprof_warningmsec",
        "weapon_accuracy_logging",
        "xbox_autothrottle",
        "xbox_throttlebias",
        "xbox_throttlespoof",
        "zoom_sensitivity_ratio_joystick"

    };

    public static List<Regex> DeprecatedArgsRegexes = new()
    {
        new Regex("^net_graph.*", RegexOptions.Compiled)
    };

    public static List<Regex> DeprecatedCommandsRegexes = new()
    {

    };


    public static List<Tuple<string, string>> ReplaceableArgs = new()
    {
        new Tuple<string, string>("+moveleft", "+left"),
        new Tuple<string, string>("+moveright", "+right"),
        new Tuple<string, string>("+moveright", "+right"),
        new Tuple<string, string>("use weapon_hegrenade", "slot6"),
        new Tuple<string, string>("use weapon_flashbang", "slot7"),
        new Tuple<string, string>("use weapon_smokegrenade", "slot8"),
        new Tuple<string, string>("use weapon_decoy", "slot9"),
        //new Tuple<string, string>("use weapon_molotov;use weapon_incgrenade", "slot10"),
        //new Tuple<string, string>("use weapon_incgrenade;use weapon_molotov", "slot10"),
        new Tuple<string, string>("use weapon_incgrenade", "slot10"),
        new Tuple<string, string>("use weapon_molotov", "slot10"),
        new Tuple<string, string>("+speed", "+sprint")
    };

    public static List<Tuple<Regex, string>> ReplaceableArgsRegexes = new()
    {
        new Tuple<Regex, string>(new Regex("use\\s+?weapon_molotov\\s{0,}?;\\s{0,}?use\\s+?weapon_incgrenade", RegexOptions.Compiled), "slot10"),
        new Tuple<Regex, string>(new Regex("use\\s+?weapon_incgrenade\\s{0,}?;\\s{0,}?use\\s+?weapon_molotov", RegexOptions.Compiled), "slot10"),
        new Tuple<Regex, string>(new Regex("r_cleardecals\\s{0,}?;?", RegexOptions.Compiled), "")
    };

    public static List<Tuple<string, string>> ReplaceableCommands = new()
    {
        new Tuple<string, string>("net_graph", "cq_netgraph")
    };
}
